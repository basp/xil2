//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Xil.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
public partial class XilParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, BOOL=7, INT=8, HEX=9, 
		FLOAT=10, CHAR=11, STRING=12, SYMBOL=13, SINGLE_LINE_COMMENT=14, MULTI_LINE_COMMENT=15, 
		WS=16;
	public const int
		RULE_cycle = 0, RULE_simpleDefinition = 1, RULE_term = 2, RULE_factor = 3, 
		RULE_setLiteral = 4, RULE_quotationLiteral = 5, RULE_atomicSymbol = 6, 
		RULE_booleanConstant = 7, RULE_integerConstant = 8, RULE_floatConstant = 9, 
		RULE_characterConstant = 10, RULE_stringConstant = 11;
	public static readonly string[] ruleNames = {
		"cycle", "simpleDefinition", "term", "factor", "setLiteral", "quotationLiteral", 
		"atomicSymbol", "booleanConstant", "integerConstant", "floatConstant", 
		"characterConstant", "stringConstant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'=='", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "BOOL", "INT", "HEX", "FLOAT", 
		"CHAR", "STRING", "SYMBOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Xil.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static XilParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XilParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XilParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CycleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDefinitionContext simpleDefinition() {
			return GetRuleContext<SimpleDefinitionContext>(0);
		}
		public CycleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterCycle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitCycle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCycle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CycleContext cycle() {
		CycleContext _localctx = new CycleContext(Context, State);
		EnterRule(_localctx, 0, RULE_cycle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 24;
				term();
				}
				break;
			case 2:
				{
				State = 25;
				simpleDefinition();
				}
				break;
			}
			State = 28;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicSymbolContext atomicSymbol() {
			return GetRuleContext<AtomicSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public SimpleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterSimpleDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitSimpleDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDefinitionContext simpleDefinition() {
		SimpleDefinitionContext _localctx = new SimpleDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_simpleDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			atomicSymbol();
			State = 31;
			Match(T__1);
			State = 32;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 4, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15784L) != 0)) {
				{
				{
				State = 34;
				factor();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicSymbolContext atomicSymbol() {
			return GetRuleContext<AtomicSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanConstantContext booleanConstant() {
			return GetRuleContext<BooleanConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerConstantContext integerConstant() {
			return GetRuleContext<IntegerConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatConstantContext floatConstant() {
			return GetRuleContext<FloatConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterConstantContext characterConstant() {
			return GetRuleContext<CharacterConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetLiteralContext setLiteral() {
			return GetRuleContext<SetLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuotationLiteralContext quotationLiteral() {
			return GetRuleContext<QuotationLiteralContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 6, RULE_factor);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				atomicSymbol();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				booleanConstant();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				integerConstant();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 43;
				floatConstant();
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 44;
				characterConstant();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 45;
				stringConstant();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 46;
				setLiteral();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 8);
				{
				State = 47;
				quotationLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharacterConstantContext[] characterConstant() {
			return GetRuleContexts<CharacterConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterConstantContext characterConstant(int i) {
			return GetRuleContext<CharacterConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerConstantContext[] integerConstant() {
			return GetRuleContexts<IntegerConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerConstantContext integerConstant(int i) {
			return GetRuleContext<IntegerConstantContext>(i);
		}
		public SetLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterSetLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitSetLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetLiteralContext setLiteral() {
		SetLiteralContext _localctx = new SetLiteralContext(Context, State);
		EnterRule(_localctx, 8, RULE_setLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__2);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT || _la==CHAR) {
				{
				State = 53;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHAR:
					{
					State = 51;
					characterConstant();
					}
					break;
				case INT:
					{
					State = 52;
					integerConstant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public QuotationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterQuotationLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitQuotationLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuotationLiteralContext quotationLiteral() {
		QuotationLiteralContext _localctx = new QuotationLiteralContext(Context, State);
		EnterRule(_localctx, 10, RULE_quotationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(T__4);
			State = 61;
			term();
			State = 62;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(XilParser.SYMBOL, 0); }
		public AtomicSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterAtomicSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitAtomicSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicSymbolContext atomicSymbol() {
		AtomicSymbolContext _localctx = new AtomicSymbolContext(Context, State);
		EnterRule(_localctx, 12, RULE_atomicSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(XilParser.BOOL, 0); }
		public BooleanConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterBooleanConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitBooleanConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanConstantContext booleanConstant() {
		BooleanConstantContext _localctx = new BooleanConstantContext(Context, State);
		EnterRule(_localctx, 14, RULE_booleanConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(XilParser.INT, 0); }
		public IntegerConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterIntegerConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitIntegerConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerConstantContext integerConstant() {
		IntegerConstantContext _localctx = new IntegerConstantContext(Context, State);
		EnterRule(_localctx, 16, RULE_integerConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(XilParser.FLOAT, 0); }
		public FloatConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterFloatConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitFloatConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatConstantContext floatConstant() {
		FloatConstantContext _localctx = new FloatConstantContext(Context, State);
		EnterRule(_localctx, 18, RULE_floatConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(XilParser.CHAR, 0); }
		public CharacterConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterCharacterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitCharacterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterConstantContext characterConstant() {
		CharacterConstantContext _localctx = new CharacterConstantContext(Context, State);
		EnterRule(_localctx, 20, RULE_characterConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(XilParser.STRING, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXilListener typedListener = listener as IXilListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXilVisitor<TResult> typedVisitor = visitor as IXilVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(Context, State);
		EnterRule(_localctx, 22, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,16,77,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,3,0,27,8,0,1,0,1,0,1,1,
		1,1,1,1,1,1,1,2,5,2,36,8,2,10,2,12,2,39,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,3,3,49,8,3,1,4,1,4,1,4,5,4,54,8,4,10,4,12,4,57,9,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,0,0,
		12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,75,0,26,1,0,0,0,2,30,1,0,0,0,4,37,
		1,0,0,0,6,48,1,0,0,0,8,50,1,0,0,0,10,60,1,0,0,0,12,64,1,0,0,0,14,66,1,
		0,0,0,16,68,1,0,0,0,18,70,1,0,0,0,20,72,1,0,0,0,22,74,1,0,0,0,24,27,3,
		4,2,0,25,27,3,2,1,0,26,24,1,0,0,0,26,25,1,0,0,0,27,28,1,0,0,0,28,29,5,
		1,0,0,29,1,1,0,0,0,30,31,3,12,6,0,31,32,5,2,0,0,32,33,3,4,2,0,33,3,1,0,
		0,0,34,36,3,6,3,0,35,34,1,0,0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,
		0,0,38,5,1,0,0,0,39,37,1,0,0,0,40,49,3,12,6,0,41,49,3,14,7,0,42,49,3,16,
		8,0,43,49,3,18,9,0,44,49,3,20,10,0,45,49,3,22,11,0,46,49,3,8,4,0,47,49,
		3,10,5,0,48,40,1,0,0,0,48,41,1,0,0,0,48,42,1,0,0,0,48,43,1,0,0,0,48,44,
		1,0,0,0,48,45,1,0,0,0,48,46,1,0,0,0,48,47,1,0,0,0,49,7,1,0,0,0,50,55,5,
		3,0,0,51,54,3,20,10,0,52,54,3,16,8,0,53,51,1,0,0,0,53,52,1,0,0,0,54,57,
		1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,59,
		5,4,0,0,59,9,1,0,0,0,60,61,5,5,0,0,61,62,3,4,2,0,62,63,5,6,0,0,63,11,1,
		0,0,0,64,65,5,13,0,0,65,13,1,0,0,0,66,67,5,7,0,0,67,15,1,0,0,0,68,69,5,
		8,0,0,69,17,1,0,0,0,70,71,5,10,0,0,71,19,1,0,0,0,72,73,5,11,0,0,73,21,
		1,0,0,0,74,75,5,12,0,0,75,23,1,0,0,0,5,26,37,48,53,55
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
